// Basic Swiper Implementation
class Swiper {
  constructor(selector, options = {}) {
    this.container = typeof selector === 'string' ? document.querySelector(selector) : selector;
    if (!this.container) return;
    
    this.options = {
      direction: 'horizontal',
      loop: true,
      autoplay: false,
      speed: 1000,
      effect: 'slide',
      slidesPerView: 1,
      spaceBetween: 0,
      ...options
    };
    
    this.wrapper = this.container.querySelector('.swiper-wrapper');
    this.slides = Array.from(this.container.querySelectorAll('.swiper-slide'));
    this.currentIndex = 0;
    this.realIndex = 0;
    this.isPlaying = false;
    this.autoplayTimeout = null;
    
    this.init();
  }
  
  init() {
    this.setupSlides();
    this.setupPagination();
    this.setupNavigation();
    this.setupAutoplay();
    
    // Trigger init callback
    if (this.options.on && this.options.on.init) {
      this.options.on.init.call(this);
    }
  }
  
  setupSlides() {
    if (!this.wrapper || this.slides.length === 0) return;
    
    // Set initial positions
    this.slides.forEach((slide, index) => {
      slide.style.display = index === 0 ? 'block' : 'none';
      slide.style.position = 'absolute';
      slide.style.top = '0';
      slide.style.left = '0';
      slide.style.width = '100%';
      slide.style.height = '100%';
    });
    
    // Add active class to first slide
    if (this.slides[0]) {
      this.slides[0].classList.add('swiper-slide-active');
    }
  }
  
  setupPagination() {
    if (!this.options.pagination) return;
    
    const paginationEl = document.querySelector(this.options.pagination.el);
    if (!paginationEl) return;
    
    paginationEl.innerHTML = '';
    
    const slideCount = this.options.pagination.renderBullet && 
                      typeof this.options.pagination.renderBullet === 'function' ? 7 : this.slides.length;
    
    for (let i = 0; i < Math.min(slideCount, this.slides.length); i++) {
      const bullet = document.createElement('span');
      bullet.className = 'swiper-pagination-bullet';
      if (i === 0) bullet.classList.add('swiper-pagination-bullet-active');
      
      if (this.options.pagination.clickable) {
        bullet.addEventListener('click', () => this.slideTo(i));
      }
      
      paginationEl.appendChild(bullet);
    }
  }
  
  setupNavigation() {
    if (!this.options.navigation) return;
    
    const prevEl = document.querySelector(this.options.navigation.prevEl);
    const nextEl = document.querySelector(this.options.navigation.nextEl);
    
    if (prevEl) {
      prevEl.addEventListener('click', () => this.slidePrev());
    }
    
    if (nextEl) {
      nextEl.addEventListener('click', () => this.slideNext());
    }
  }
  
  setupAutoplay() {
    if (this.options.autoplay && this.options.autoplay.delay) {
      this.autoplay = {
        start: () => {
          if (this.isPlaying) return;
          this.isPlaying = true;
          this.runAutoplay();
        },
        stop: () => {
          this.isPlaying = false;
          if (this.autoplayTimeout) {
            clearTimeout(this.autoplayTimeout);
            this.autoplayTimeout = null;
          }
        }
      };
      
      // Start autoplay if not disabled on interaction
      if (!this.options.autoplay.disableOnInteraction) {
        this.autoplay.start();
      }
    }
  }
  
  runAutoplay() {
    if (!this.isPlaying) return;
    
    this.autoplayTimeout = setTimeout(() => {
      if (this.isPlaying) {
        this.slideNext();
        this.runAutoplay();
      }
    }, this.options.autoplay.delay);
  }
  
  slideTo(index) {
    if (index === this.currentIndex) return;
    
    // Trigger slideChangeTransitionStart
    if (this.options.on && this.options.on.slideChangeTransitionStart) {
      this.options.on.slideChangeTransitionStart.call(this);
    }
    
    // Hide current slide
    if (this.slides[this.currentIndex]) {
      this.slides[this.currentIndex].style.display = 'none';
      this.slides[this.currentIndex].classList.remove('swiper-slide-active');
    }
    
    // Show new slide
    this.currentIndex = index;
    this.realIndex = index % this.slides.length;
    
    if (this.slides[this.currentIndex]) {
      this.slides[this.currentIndex].style.display = 'block';
      this.slides[this.currentIndex].classList.add('swiper-slide-active');
    }
    
    // Update pagination
    this.updatePagination();
    
    // Trigger callbacks
    setTimeout(() => {
      if (this.options.on && this.options.on.slideChange) {
        this.options.on.slideChange.call(this);
      }
      
      if (this.options.on && this.options.on.slideChangeTransitionEnd) {
        this.options.on.slideChangeTransitionEnd.call(this);
      }
    }, 50);
  }
  
  slideNext() {
    let nextIndex = this.currentIndex + 1;
    if (nextIndex >= this.slides.length) {
      nextIndex = this.options.loop ? 0 : this.slides.length - 1;
    }
    this.slideTo(nextIndex);
  }
  
  slidePrev() {
    let prevIndex = this.currentIndex - 1;
    if (prevIndex < 0) {
      prevIndex = this.options.loop ? this.slides.length - 1 : 0;
    }
    this.slideTo(prevIndex);
  }
  
  updatePagination() {
    const bullets = document.querySelectorAll('.swiper-pagination-bullet');
    bullets.forEach((bullet, index) => {
      if (index === this.realIndex) {
        bullet.classList.add('swiper-pagination-bullet-active');
      } else {
        bullet.classList.remove('swiper-pagination-bullet-active');
      }
    });
  }
}

// Make Swiper globally available
window.Swiper = Swiper;